using System.Collections.Generic;
using System.Xml;
using System.Xml.Linq;
using Orchard;
using Orchard.ContentManagement.MetaData;
using Orchard.Environment.Descriptor;
using Orchard.Environment.Extensions;
using Orchard.FileSystems.AppData;
using Orchard.ImportExport.Services;
using Orchard.Recipes.Services;
using Orchard.Services;

namespace CJP.ContentSync.AlternateImplementations {
    [OrchardFeature("CJP.ContentSync.LenientContentExport")]
    [OrchardSuppressDependency("Orchard.ImportExport.Services.ErrorHandlingImportExportService")]
    public class LenientImportExportService : ImportExportService, IImportExportService
    {
        private readonly IOrchardServices _orchardServices;
        private readonly IContentDefinitionManager _contentDefinitionManager;
        private readonly IContentDefinitionWriter _contentDefinitionWriter;
        private readonly IAppDataFolder _appDataFolder;
        private readonly IClock _clock;
        private readonly IEnumerable<IExportEventHandler> _exportEventHandlers;

        private const string ExportsDirectory = "Exports";

        public LenientImportExportService(IOrchardServices orchardServices,
                    IContentDefinitionManager contentDefinitionManager,
                    IContentDefinitionWriter contentDefinitionWriter,
                    IAppDataFolder appDataFolder,
                    IRecipeParser recipeParser,
                    IRecipeManager recipeManager,
                    IShellDescriptorManager shellDescriptorManager,
                    IClock clock,
                    IEnumerable<IExportEventHandler> exportEventHandlers,
                    IEnumerable<IExportAction> exportActions,
                    IEnumerable<IImportAction> importActions)
            : base(orchardServices, appDataFolder, clock, exportActions, importActions) {
            _orchardServices = orchardServices;
            _contentDefinitionManager = contentDefinitionManager;
            _contentDefinitionWriter = contentDefinitionWriter;
            _appDataFolder = appDataFolder;
            _clock = clock;
            _exportEventHandlers = exportEventHandlers;
        }

        private XDocument CreateExportRoot() 
        {
            var currentUser = _orchardServices.WorkContext.CurrentUser;
            var userName = currentUser == null ? "Anonymous" : currentUser.UserName;

            var exportRoot = new XDocument(
                new XDeclaration("1.0", "", "yes"),
                new XComment("Exported from Orchard"),
                new XComment("Exported with CJP.ContentSync Leniant Export Service"),
                new XElement("Orchard",
                             new XElement("Recipe",
                                          new XElement("Name", "Generated by Orchard.ImportExport"),
                                          new XElement("Author", userName),
                                          new XElement("ExportUtc", XmlConvert.ToString(_clock.UtcNow, XmlDateTimeSerializationMode.Utc))
                                 )
                    )
                );
            return exportRoot;
        }
    }
}