using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using Orchard;
using Orchard.ContentManagement;
using Orchard.ContentManagement.MetaData;
using Orchard.Environment.Descriptor;
using Orchard.Environment.Extensions;
using Orchard.FileSystems.AppData;
using Orchard.ImportExport.Models;
using Orchard.ImportExport.Services;
using Orchard.Logging;
using Orchard.Recipes.Services;
using Orchard.Services;

namespace CJP.ContentSync.AlternateImplementations
{
    [OrchardFeature("CJP.ContentSync.LenientContentExport")]
    [OrchardSuppressDependency("Orchard.ImportExport.Services.ErrorHandlingImportExportService")]
    public class LenientImportExportService : ImportExportService, IImportExportService
    {
        private readonly IOrchardServices _orchardServices;
        private readonly IContentDefinitionManager _contentDefinitionManager;
        private readonly IContentDefinitionWriter _contentDefinitionWriter;
        private readonly IAppDataFolder _appDataFolder;
        private readonly IClock _clock;
        private readonly IEnumerable<IExportEventHandler> _exportEventHandlers;

        private const string ExportsDirectory = "Exports";

        public LenientImportExportService(IOrchardServices orchardServices,
                    IContentDefinitionManager contentDefinitionManager,
                    IContentDefinitionWriter contentDefinitionWriter,
                    IAppDataFolder appDataFolder,
                    IRecipeParser recipeParser,
                    IRecipeManager recipeManager,
                    IShellDescriptorManager shellDescriptorManager,
                    IClock clock,
                    IEnumerable<IExportEventHandler> exportEventHandlers)
            : base(orchardServices, contentDefinitionManager, contentDefinitionWriter, appDataFolder, recipeParser, recipeManager, shellDescriptorManager, clock, exportEventHandlers) {
            _orchardServices = orchardServices;
            _contentDefinitionManager = contentDefinitionManager;
            _contentDefinitionWriter = contentDefinitionWriter;
            _appDataFolder = appDataFolder;
            _clock = clock;
            _exportEventHandlers = exportEventHandlers;
        }

        public new string Export(IEnumerable<string> contentTypes, ExportOptions exportOptions)
        {
            //items need to be retrieved
            IEnumerable<ContentItem> contentItems = null;
            if (exportOptions.ExportData)
            {
                contentItems = _orchardServices.ContentManager.Query(GetContentExportVersionOptions(exportOptions.VersionHistoryOptions), contentTypes.ToArray()).List();
            }

            return Export(contentTypes, contentItems, exportOptions);
        }

        public new string Export(IEnumerable<string> contentTypes, IEnumerable<ContentItem> contentItems, ExportOptions exportOptions)
        {
            var exportDocument = CreateExportRoot();

            var context = new ExportContext
            {
                Document = exportDocument,
                ContentTypes = contentTypes,
                ExportOptions = exportOptions
            };

            _exportEventHandlers.Invoke(x => x.Exporting(context), Logger);

            if (exportOptions.ExportMetadata && (!exportOptions.ExportData || contentItems.Any()))
            {
                exportDocument.Element("Orchard").Add(ExportMetadata(contentTypes));
            }

            if (exportOptions.ExportSiteSettings)
            {
                exportDocument.Element("Orchard").Add(ExportSiteSettings());
            }

            if (exportOptions.ExportData && contentItems.Any())
            {
                exportDocument.Element("Orchard").Add(ExportData(contentTypes, contentItems, exportOptions.ImportBatchSize));
            }

            _exportEventHandlers.Invoke(x => x.Exported(context), Logger);

            return WriteExportFile(exportDocument.ToString());
        }

        private XDocument CreateExportRoot() 
        {
            var currentUser = _orchardServices.WorkContext.CurrentUser;
            var userName = currentUser == null ? "Anonymous" : currentUser.UserName;

            var exportRoot = new XDocument(
                new XDeclaration("1.0", "", "yes"),
                new XComment("Exported from Orchard"),
                new XComment("Exported with CJP.ContentSync Leniant Export Service"),
                new XElement("Orchard",
                             new XElement("Recipe",
                                          new XElement("Name", "Generated by Orchard.ImportExport"),
                                          new XElement("Author", userName),
                                          new XElement("ExportUtc", XmlConvert.ToString(_clock.UtcNow, XmlDateTimeSerializationMode.Utc))
                                 )
                    )
                );
            return exportRoot;
        }

        private XElement ExportMetadata(IEnumerable<string> contentTypes)
        {
            var typesElement = new XElement("Types");
            var partsElement = new XElement("Parts");
            var typesToExport = _contentDefinitionManager.ListTypeDefinitions()
                .Where(typeDefinition => contentTypes.Contains(typeDefinition.Name))
                .ToList();
            var partsToExport = new List<string>();

            foreach (var contentTypeDefinition in typesToExport)
            {
                foreach (var contentPartDefinition in contentTypeDefinition.Parts)
                {
                    if (partsToExport.Contains(contentPartDefinition.PartDefinition.Name))
                    {
                        continue;
                    }
                    partsToExport.Add(contentPartDefinition.PartDefinition.Name);
                    partsElement.Add(_contentDefinitionWriter.Export(contentPartDefinition.PartDefinition));
                }
                typesElement.Add(_contentDefinitionWriter.Export(contentTypeDefinition));
            }

            return new XElement("Metadata", typesElement, partsElement);
        }

        private XElement ExportSiteSettings()
        {
            var settings = new XElement("Settings");
            var hasSetting = false;

            foreach (var sitePart in _orchardServices.WorkContext.CurrentSite.ContentItem.Parts)
            {
                var setting = new XElement(sitePart.PartDefinition.Name);

                foreach (var property in sitePart.GetType().GetProperties())
                {
                    var propertyType = property.PropertyType;
                    // Supported types (we also know they are not indexed properties).
                    if (propertyType == typeof(string) || propertyType == typeof(bool) || propertyType == typeof(int))
                    {
                        // Exclude read-only properties.
                        if (property.GetSetMethod() != null)
                        {
                            setting.SetAttributeValue(property.Name, property.GetValue(sitePart, null));
                            hasSetting = true;
                        }
                    }
                }

                if (hasSetting)
                {
                    settings.Add(setting);
                    hasSetting = false;
                }
            }

            return settings;
        }

        private XElement ExportData(IEnumerable<string> contentTypes, IEnumerable<ContentItem> contentItems, int? batchSize)
        {
            var data = new XElement("Data");

            if (batchSize.HasValue && batchSize.Value > 0)
                data.SetAttributeValue("BatchSize", batchSize);

            foreach (var contentType in contentTypes)
            {
                var type = contentType;
                var items = contentItems.Where(i => i.ContentType == type);
                foreach (var contentItem in items)
                {
                    var contentItemElement = ExportContentItem(contentItem);
                    if (contentItemElement != null)
                        data.Add(contentItemElement);
                }
            }

            return data;
        }

        private XElement ExportContentItem(ContentItem contentItem) 
        {
            XElement element = null;

            try 
            {
                element = _orchardServices.ContentManager.Export(contentItem);
            }
            catch (Exception ex) 
            {
                Logger.Error(ex, "Content Item {0} id: {1} could not be exported, as an unhandled exception was thrown while calling the export method on one of the content item's parts.", contentItem.ContentType, contentItem.Id);
            }

            return element;
        }

        private static VersionOptions GetContentExportVersionOptions(VersionHistoryOptions versionHistoryOptions)
        {
            if (versionHistoryOptions.HasFlag(VersionHistoryOptions.Draft))
            {
                return VersionOptions.Draft;
            }
            return VersionOptions.Published;
        }

        private string WriteExportFile(string exportDocument)
        {
            var exportFile = string.Format("Export-{0}-{1}.xml", _orchardServices.WorkContext.CurrentUser.UserName, DateTime.UtcNow.Ticks);
            if (!_appDataFolder.DirectoryExists(ExportsDirectory))
            {
                _appDataFolder.CreateDirectory(ExportsDirectory);
            }

            var path = _appDataFolder.Combine(ExportsDirectory, exportFile);
            _appDataFolder.CreateFile(path, exportDocument);

            return _appDataFolder.MapPath(path);
        }
    }
}